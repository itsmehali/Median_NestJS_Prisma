generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Article {
  id          Int      @id @default(autoincrement())
  title       String   @unique
  description String?
  body        String
  published   Boolean  @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@map("articles")
}

model User {
  id        Int      @id @default(autoincrement())
  email     String   @unique
  hash      String
  hashedRt  String?
  name      String?
  role      Role     @default(USER)
  createdAt DateTime @default(now())
  posts     Post[]
  profile  Profile?
  sentFriendRequest FriendRequest[] @relation("sendReferral")
  receiverFriendRequest FriendRequest[] @relation("receiveReferral")


  @@map("users")
}

model Post {
  id          Int      @id @default(autoincrement())
  title       String   @db.VarChar(255)
  image       String?
  description String?
  authorId    Int
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  author      User?    @relation(fields: [authorId], references: [id], onDelete: Cascade)

  @@map("posts")
}

model Profile {
  id Int @id @default(autoincrement())
  image    String?
  nickname String?
  user User @relation(fields: [userId], references: [id] , onDelete: Cascade)
  userId Int @unique


  @@map("profile")
}

model FriendRequest {
    id Int @id @default(autoincrement())
    creatorId      User?    @relation(fields: [creator], references: [id], name: "sendReferral" , onDelete: Cascade)
    creator Int
    receiverId      User?    @relation(fields: [receiver], references: [id], name: "receiveReferral", onDelete: Cascade)
    receiver Int
    status String
}


enum Role {
  USER
  ADMIN
}
